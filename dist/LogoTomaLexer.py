# Generated from .\LogoToma.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,331,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,
        23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,35,4,35,270,8,35,11,
        35,12,35,271,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,3,39,287,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,3,40,298,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,3,41,313,8,41,1,42,4,42,316,8,42,11,42,12,
        42,317,1,43,3,43,321,8,43,1,43,1,43,1,44,4,44,326,8,44,11,44,12,
        44,327,1,44,1,44,0,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,1,0,7,2,0,43,43,45,45,1,0,48,57,4,0,37,37,42,43,
        45,45,47,47,2,0,38,38,124,124,2,0,60,60,62,62,3,0,65,90,95,95,97,
        122,3,0,9,10,13,13,32,32,339,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,94,1,0,0,0,5,99,1,0,0,0,7,
        101,1,0,0,0,9,103,1,0,0,0,11,109,1,0,0,0,13,114,1,0,0,0,15,126,1,
        0,0,0,17,132,1,0,0,0,19,144,1,0,0,0,21,150,1,0,0,0,23,161,1,0,0,
        0,25,167,1,0,0,0,27,172,1,0,0,0,29,179,1,0,0,0,31,181,1,0,0,0,33,
        183,1,0,0,0,35,185,1,0,0,0,37,191,1,0,0,0,39,196,1,0,0,0,41,202,
        1,0,0,0,43,209,1,0,0,0,45,216,1,0,0,0,47,219,1,0,0,0,49,224,1,0,
        0,0,51,230,1,0,0,0,53,241,1,0,0,0,55,246,1,0,0,0,57,248,1,0,0,0,
        59,250,1,0,0,0,61,252,1,0,0,0,63,254,1,0,0,0,65,256,1,0,0,0,67,258,
        1,0,0,0,69,266,1,0,0,0,71,269,1,0,0,0,73,273,1,0,0,0,75,275,1,0,
        0,0,77,277,1,0,0,0,79,286,1,0,0,0,81,297,1,0,0,0,83,312,1,0,0,0,
        85,315,1,0,0,0,87,320,1,0,0,0,89,325,1,0,0,0,91,92,5,109,0,0,92,
        93,5,118,0,0,93,2,1,0,0,0,94,95,5,109,0,0,95,96,5,111,0,0,96,97,
        5,118,0,0,97,98,5,101,0,0,98,4,1,0,0,0,99,100,5,35,0,0,100,6,1,0,
        0,0,101,102,5,61,0,0,102,8,1,0,0,0,103,104,5,112,0,0,104,105,5,97,
        0,0,105,106,5,105,0,0,106,107,5,110,0,0,107,108,5,116,0,0,108,10,
        1,0,0,0,109,110,5,115,0,0,110,111,5,97,0,0,111,112,5,118,0,0,112,
        113,5,101,0,0,113,12,1,0,0,0,114,115,5,98,0,0,115,116,5,114,0,0,
        116,117,5,117,0,0,117,118,5,115,0,0,118,119,5,104,0,0,119,120,5,
        45,0,0,120,121,5,115,0,0,121,122,5,104,0,0,122,123,5,97,0,0,123,
        124,5,112,0,0,124,125,5,101,0,0,125,14,1,0,0,0,126,127,5,98,0,0,
        127,128,5,115,0,0,128,129,5,45,0,0,129,130,5,115,0,0,130,131,5,104,
        0,0,131,16,1,0,0,0,132,133,5,98,0,0,133,134,5,114,0,0,134,135,5,
        117,0,0,135,136,5,115,0,0,136,137,5,104,0,0,137,138,5,45,0,0,138,
        139,5,99,0,0,139,140,5,111,0,0,140,141,5,108,0,0,141,142,5,111,0,
        0,142,143,5,114,0,0,143,18,1,0,0,0,144,145,5,98,0,0,145,146,5,115,
        0,0,146,147,5,45,0,0,147,148,5,99,0,0,148,149,5,108,0,0,149,20,1,
        0,0,0,150,151,5,98,0,0,151,152,5,114,0,0,152,153,5,117,0,0,153,154,
        5,115,0,0,154,155,5,104,0,0,155,156,5,45,0,0,156,157,5,115,0,0,157,
        158,5,105,0,0,158,159,5,122,0,0,159,160,5,101,0,0,160,22,1,0,0,0,
        161,162,5,98,0,0,162,163,5,115,0,0,163,164,5,45,0,0,164,165,5,115,
        0,0,165,166,5,122,0,0,166,24,1,0,0,0,167,168,5,108,0,0,168,169,5,
        105,0,0,169,170,5,110,0,0,170,171,5,101,0,0,171,26,1,0,0,0,172,173,
        5,99,0,0,173,174,5,105,0,0,174,175,5,114,0,0,175,176,5,99,0,0,176,
        177,5,108,0,0,177,178,5,101,0,0,178,28,1,0,0,0,179,180,5,40,0,0,
        180,30,1,0,0,0,181,182,5,44,0,0,182,32,1,0,0,0,183,184,5,41,0,0,
        184,34,1,0,0,0,185,186,5,115,0,0,186,187,5,104,0,0,187,188,5,97,
        0,0,188,189,5,112,0,0,189,190,5,101,0,0,190,36,1,0,0,0,191,192,5,
        98,0,0,192,193,5,111,0,0,193,194,5,111,0,0,194,195,5,108,0,0,195,
        38,1,0,0,0,196,197,5,99,0,0,197,198,5,111,0,0,198,199,5,108,0,0,
        199,200,5,111,0,0,200,201,5,114,0,0,201,40,1,0,0,0,202,203,5,110,
        0,0,203,204,5,117,0,0,204,205,5,109,0,0,205,206,5,98,0,0,206,207,
        5,101,0,0,207,208,5,114,0,0,208,42,1,0,0,0,209,210,5,115,0,0,210,
        211,5,116,0,0,211,212,5,114,0,0,212,213,5,105,0,0,213,214,5,110,
        0,0,214,215,5,103,0,0,215,44,1,0,0,0,216,217,5,105,0,0,217,218,5,
        102,0,0,218,46,1,0,0,0,219,220,5,108,0,0,220,221,5,111,0,0,221,222,
        5,111,0,0,222,223,5,112,0,0,223,48,1,0,0,0,224,225,5,116,0,0,225,
        226,5,105,0,0,226,227,5,109,0,0,227,228,5,101,0,0,228,229,5,115,
        0,0,229,50,1,0,0,0,230,231,5,108,0,0,231,232,5,111,0,0,232,233,5,
        111,0,0,233,234,5,112,0,0,234,235,5,32,0,0,235,236,5,119,0,0,236,
        237,5,104,0,0,237,238,5,105,0,0,238,239,5,108,0,0,239,240,5,101,
        0,0,240,52,1,0,0,0,241,242,5,101,0,0,242,243,5,108,0,0,243,244,5,
        115,0,0,244,245,5,101,0,0,245,54,1,0,0,0,246,247,5,43,0,0,247,56,
        1,0,0,0,248,249,5,45,0,0,249,58,1,0,0,0,250,251,5,42,0,0,251,60,
        1,0,0,0,252,253,5,47,0,0,253,62,1,0,0,0,254,255,5,123,0,0,255,64,
        1,0,0,0,256,257,5,125,0,0,257,66,1,0,0,0,258,259,5,112,0,0,259,260,
        5,97,0,0,260,261,5,116,0,0,261,262,5,116,0,0,262,263,5,101,0,0,263,
        264,5,114,0,0,264,265,5,110,0,0,265,68,1,0,0,0,266,267,7,0,0,0,267,
        70,1,0,0,0,268,270,7,1,0,0,269,268,1,0,0,0,270,271,1,0,0,0,271,269,
        1,0,0,0,271,272,1,0,0,0,272,72,1,0,0,0,273,274,7,2,0,0,274,74,1,
        0,0,0,275,276,5,33,0,0,276,76,1,0,0,0,277,278,7,3,0,0,278,78,1,0,
        0,0,279,280,5,61,0,0,280,287,5,61,0,0,281,287,7,4,0,0,282,283,5,
        60,0,0,283,287,5,61,0,0,284,285,5,62,0,0,285,287,5,61,0,0,286,279,
        1,0,0,0,286,281,1,0,0,0,286,282,1,0,0,0,286,284,1,0,0,0,287,80,1,
        0,0,0,288,289,5,84,0,0,289,290,5,114,0,0,290,291,5,117,0,0,291,298,
        5,101,0,0,292,293,5,70,0,0,293,294,5,97,0,0,294,295,5,108,0,0,295,
        296,5,115,0,0,296,298,5,101,0,0,297,288,1,0,0,0,297,292,1,0,0,0,
        298,82,1,0,0,0,299,300,5,67,0,0,300,301,5,97,0,0,301,302,5,108,0,
        0,302,303,5,105,0,0,303,304,5,103,0,0,304,305,5,114,0,0,305,306,
        5,97,0,0,306,307,5,102,0,0,307,308,5,105,0,0,308,313,5,99,0,0,309,
        310,5,68,0,0,310,311,5,111,0,0,311,313,5,116,0,0,312,299,1,0,0,0,
        312,309,1,0,0,0,313,84,1,0,0,0,314,316,7,5,0,0,315,314,1,0,0,0,316,
        317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,86,1,0,0,0,319,321,
        5,13,0,0,320,319,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,
        5,10,0,0,323,88,1,0,0,0,324,326,7,6,0,0,325,324,1,0,0,0,326,327,
        1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,330,
        6,44,0,0,330,90,1,0,0,0,8,0,271,286,297,312,317,320,327,1,6,0,0
    ]

class LogoTomaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    SIGN_OPERATORS = 35
    NUMBER = 36
    ARITMETIC_OPERATORS = 37
    NEGATION_OPERATOR = 38
    LOGIC_OPERATORS = 39
    COMPARISON_OPERATORS = 40
    BOOL = 41
    SHAPE = 42
    STRING = 43
    EOL = 44
    WS = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'mv'", "'move'", "'#'", "'='", "'paint'", "'save'", "'brush-shape'", 
            "'bs-sh'", "'brush-color'", "'bs-cl'", "'brush-size'", "'bs-sz'", 
            "'line'", "'circle'", "'('", "','", "')'", "'shape'", "'bool'", 
            "'color'", "'number'", "'string'", "'if'", "'loop'", "'times'", 
            "'loop while'", "'else'", "'+'", "'-'", "'*'", "'/'", "'{'", 
            "'}'", "'pattern'", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "SIGN_OPERATORS", "NUMBER", "ARITMETIC_OPERATORS", "NEGATION_OPERATOR", 
            "LOGIC_OPERATORS", "COMPARISON_OPERATORS", "BOOL", "SHAPE", 
            "STRING", "EOL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "SIGN_OPERATORS", "NUMBER", "ARITMETIC_OPERATORS", 
                  "NEGATION_OPERATOR", "LOGIC_OPERATORS", "COMPARISON_OPERATORS", 
                  "BOOL", "SHAPE", "STRING", "EOL", "WS" ]

    grammarFileName = "LogoToma.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


